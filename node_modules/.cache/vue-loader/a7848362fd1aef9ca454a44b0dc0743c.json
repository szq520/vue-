{"remainingRequest":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js??vue-loader-options!E:\\vueDome\\vue_Component\\src\\components\\easy-cron\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueDome\\vue_Component\\src\\components\\easy-cron\\index.vue","mtime":1576919380920},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_babel-loader@8.0.6@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport SecondUi from './tabs/second'\r\nimport MinuteUi from './tabs/minute'\r\nimport HourUi from './tabs/hour'\r\nimport DayUi from './tabs/day'\r\nimport WeekUi from './tabs/week'\r\nimport MonthUi from './tabs/month'\r\nimport YearUi from './tabs/year'\r\nimport CronParser from 'cron-parser'\r\nimport dateFormat from './format-date'\r\nimport { debounce } from 'debounce'\r\n\r\nexport default {\r\n  name: 'easy-cron',\r\n  model: {\r\n    prop: 'cronValue',\r\n    event: 'change'\r\n  },\r\n  props: {\r\n    cronValue: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    exeStartTime: {\r\n      type: [Number, String, Object],\r\n      default: 0\r\n    },\r\n    hideSecond: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    hideYear: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    remote: {\r\n      type: Function,\r\n      default: null\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      curtab: this.hideSecond ? 'minute' : 'second',\r\n      second: '*',\r\n      minute: '*',\r\n      hour: '*',\r\n      day: '*',\r\n      month: '*',\r\n      week: '?',\r\n      year: '*',\r\n      startTime: new Date(),\r\n      preTimeList: '执行预览，会忽略年份参数',\r\n      columns: [{ title: ' ', width: '80', key: 'name' }, { title: ' ', key: 'value' }]\r\n    }\r\n  },\r\n  computed: {\r\n    tableData () {\r\n      let c = this.hideSecond ? [] : [{ name: '秒', value: this.second }]\r\n      c = c.concat([\r\n        { name: '分', value: this.minute },\r\n        { name: '时', value: this.hour },\r\n        { name: '日', value: this.day },\r\n        { name: '月', value: this.month },\r\n        { name: '周', value: this.week }\r\n      ])\r\n      return (this.hideSecond || this.hideYear) ? c.concat({ name: '表达式', value: this.cronValue_c })\r\n        : c.concat(\r\n          { name: '年', value: this.year },\r\n          { name: '表达式', value: this.cronValue_c },\r\n          { name: '表达式(不含年)', value: this.cronValue_c2 }\r\n        )\r\n    },\r\n    cronValue_c () {\r\n      let result = []\r\n      if (!this.hideSecond) result.push(this.second ? this.second : '*')\r\n      result.push(this.minute ? this.minute : '*')\r\n      result.push(this.hour ? this.hour : '*')\r\n      result.push(this.day ? this.day : '*')\r\n      result.push(this.month ? this.month : '*')\r\n      result.push(this.week ? this.week : '?')\r\n      if (!this.hideYear && !this.hideSecond) result.push(this.year ? this.year : '*')\r\n      return result.join(' ')\r\n    },\r\n    cronValue_c2 () {\r\n      const v = this.cronValue_c\r\n      if (this.hideYear || this.hideSecond) return v\r\n      const vs = v.split(' ')\r\n      return vs.slice(0, vs.length - 1).join(' ')\r\n    }\r\n  },\r\n  watch: {\r\n    cronValue (newVal, oldVal) {\r\n      if (newVal === this.cronValue_c) {\r\n        // console.info('same cron value: ' + newVal)\r\n        return\r\n      }\r\n      this.formatValue()\r\n    },\r\n    cronValue_c (newVal, oldVal) {\r\n      this.calTriggerList()\r\n      this.$emit('change', newVal)\r\n    },\r\n    exeStartTime (newVal, oldVal) {\r\n      this.calStartTime()\r\n    },\r\n    startTime (newVal, oldVal) {\r\n      this.calTriggerList()\r\n    }\r\n  },\r\n  methods: {\r\n    formatValue () {\r\n      console.info(this.cronValue)\r\n      if (!this.cronValue) return\r\n      const values = this.cronValue.split(' ').filter(item => !!item)\r\n      if (!values || values.length <= 0) return\r\n      let i = 0\r\n      if (!this.hideSecond) this.second = values[i++]\r\n      if (values.length > i) this.minute = values[i++]\r\n      if (values.length > i) this.hour = values[i++]\r\n      if (values.length > i) this.day = values[i++]\r\n      if (values.length > i) this.month = values[i++]\r\n      if (values.length > i) this.week = values[i++]\r\n      if (values.length > i) this.year = values[i]\r\n    },\r\n    calTriggerList: debounce(function () {\r\n      this.calTriggerListInner()\r\n    }, 500),\r\n    calTriggerListInner () {\r\n      // 设置了回调函数\r\n      if (this.remote) {\r\n        this.remote(this.cronValue_c2, +this.startTime, v => { this.preTimeList = v })\r\n        return\r\n      }\r\n      // 去掉年份参数\r\n      const e = this.cronValue_c2\r\n      // console.info('>>>>>>' + e)\r\n      const format = 'yyyy-MM-dd hh:mm:ss'\r\n      const options = {\r\n        currentDate: dateFormat(this.startTime, format)\r\n      }\r\n      // console.info(options)\r\n      const iter = CronParser.parseExpression(e, options)\r\n      const result = []\r\n      for (let i = 0; i < 5; i++) {\r\n        result.push(dateFormat(new Date(iter.next()), format))\r\n      }\r\n      this.preTimeList = result.length > 0 ? result.join('\\n') : '无执行时间'\r\n    },\r\n    calStartTime () {\r\n      if (!this.exeStartTime) {\r\n        this.startTime = new Date()\r\n        return\r\n      }\r\n      try {\r\n        this.startTime = new Date(this.exeStartTime)\r\n      } catch (e) {\r\n        this.startTime = new Date()\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    SecondUi,\r\n    MinuteUi,\r\n    HourUi,\r\n    DayUi,\r\n    WeekUi,\r\n    MonthUi,\r\n    YearUi\r\n  },\r\n  created () {\r\n    this.formatValue()\r\n    this.calStartTime()\r\n    this.$nextTick(() => {\r\n      this.calTriggerListInner()\r\n    })\r\n  }\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"index.vue","sourceRoot":"src/components/easy-cron","sourcesContent":["<template>\r\n  <Card class=\"easy-cron\">\r\n    <div class=\"content\">\r\n      <div class=\"left\">\r\n        <Tabs size=\"small\" v-model=\"curtab\">\r\n          <TabPane label=\"秒\" name=\"second\" v-if=\"!hideSecond\"><second-ui v-model=\"second\" :disabled=\"disabled\"></second-ui></TabPane>\r\n          <TabPane label=\"分\" name=\"minute\"><minute-ui v-model=\"minute\" :disabled=\"disabled\"></minute-ui></TabPane>\r\n          <TabPane label=\"时\" name=\"hour\"><hour-ui v-model=\"hour\" :disabled=\"disabled\"></hour-ui></TabPane>\r\n          <TabPane label=\"日\" name=\"day\"><day-ui v-model=\"day\" :week=\"week\" :disabled=\"disabled\"></day-ui></TabPane>\r\n          <TabPane label=\"月\" name=\"month\"><month-ui v-model=\"month\" :disabled=\"disabled\"></month-ui></TabPane>\r\n          <TabPane label=\"周\" name=\"week\"><week-ui v-model=\"week\" :day=\"day\" :disabled=\"disabled\"></week-ui></TabPane>\r\n          <TabPane label=\"年\" name=\"year\" v-if=\"!hideYear && !hideSecond\"><year-ui v-model=\"year\" :disabled=\"disabled\"></year-ui></TabPane>\r\n        </Tabs>\r\n      </div>\r\n      <div class=\"right_top\">\r\n        <p>Cron表达式</p>\r\n        <p>{{cronValue_c}}</p>\r\n      </div>\r\n      <!-- <div class=\"right\"> -->\r\n        \r\n        <!-- <div class=\"field-list\"><Table stripe :columns=\"columns\" :data=\"tableData\"\r\n          :show-header=\"false\" size=\"small\"></Table></div>\r\n        <div class=\"exe-pre\">\r\n          <div class=\"exe-pre-panel\">\r\n            <label class=\"p-left\">执行时间</label>\r\n            <DatePicker type=\"datetime\" v-model=\"startTime\" class=\"p-right\"\r\n              placeholder=\"选择执行开始时间\"></DatePicker>\r\n          </div>\r\n          <div class=\"exe-pre-panel\">\r\n            <Tooltip content=\"执行预览解析不含年参数\" class=\"p-left\">\r\n              <label>执行预览</label>\r\n            </Tooltip>\r\n            <Input type=\"textarea\" :value=\"preTimeList\" class=\"p-right\" :rows=\"4\" readonly />\r\n          </div>\r\n        </div> -->\r\n      <!-- </div> -->\r\n    </div>\r\n  </Card>\r\n</template>\r\n\r\n<script>\r\nimport SecondUi from './tabs/second'\r\nimport MinuteUi from './tabs/minute'\r\nimport HourUi from './tabs/hour'\r\nimport DayUi from './tabs/day'\r\nimport WeekUi from './tabs/week'\r\nimport MonthUi from './tabs/month'\r\nimport YearUi from './tabs/year'\r\nimport CronParser from 'cron-parser'\r\nimport dateFormat from './format-date'\r\nimport { debounce } from 'debounce'\r\n\r\nexport default {\r\n  name: 'easy-cron',\r\n  model: {\r\n    prop: 'cronValue',\r\n    event: 'change'\r\n  },\r\n  props: {\r\n    cronValue: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    exeStartTime: {\r\n      type: [Number, String, Object],\r\n      default: 0\r\n    },\r\n    hideSecond: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    hideYear: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    remote: {\r\n      type: Function,\r\n      default: null\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      curtab: this.hideSecond ? 'minute' : 'second',\r\n      second: '*',\r\n      minute: '*',\r\n      hour: '*',\r\n      day: '*',\r\n      month: '*',\r\n      week: '?',\r\n      year: '*',\r\n      startTime: new Date(),\r\n      preTimeList: '执行预览，会忽略年份参数',\r\n      columns: [{ title: ' ', width: '80', key: 'name' }, { title: ' ', key: 'value' }]\r\n    }\r\n  },\r\n  computed: {\r\n    tableData () {\r\n      let c = this.hideSecond ? [] : [{ name: '秒', value: this.second }]\r\n      c = c.concat([\r\n        { name: '分', value: this.minute },\r\n        { name: '时', value: this.hour },\r\n        { name: '日', value: this.day },\r\n        { name: '月', value: this.month },\r\n        { name: '周', value: this.week }\r\n      ])\r\n      return (this.hideSecond || this.hideYear) ? c.concat({ name: '表达式', value: this.cronValue_c })\r\n        : c.concat(\r\n          { name: '年', value: this.year },\r\n          { name: '表达式', value: this.cronValue_c },\r\n          { name: '表达式(不含年)', value: this.cronValue_c2 }\r\n        )\r\n    },\r\n    cronValue_c () {\r\n      let result = []\r\n      if (!this.hideSecond) result.push(this.second ? this.second : '*')\r\n      result.push(this.minute ? this.minute : '*')\r\n      result.push(this.hour ? this.hour : '*')\r\n      result.push(this.day ? this.day : '*')\r\n      result.push(this.month ? this.month : '*')\r\n      result.push(this.week ? this.week : '?')\r\n      if (!this.hideYear && !this.hideSecond) result.push(this.year ? this.year : '*')\r\n      return result.join(' ')\r\n    },\r\n    cronValue_c2 () {\r\n      const v = this.cronValue_c\r\n      if (this.hideYear || this.hideSecond) return v\r\n      const vs = v.split(' ')\r\n      return vs.slice(0, vs.length - 1).join(' ')\r\n    }\r\n  },\r\n  watch: {\r\n    cronValue (newVal, oldVal) {\r\n      if (newVal === this.cronValue_c) {\r\n        // console.info('same cron value: ' + newVal)\r\n        return\r\n      }\r\n      this.formatValue()\r\n    },\r\n    cronValue_c (newVal, oldVal) {\r\n      this.calTriggerList()\r\n      this.$emit('change', newVal)\r\n    },\r\n    exeStartTime (newVal, oldVal) {\r\n      this.calStartTime()\r\n    },\r\n    startTime (newVal, oldVal) {\r\n      this.calTriggerList()\r\n    }\r\n  },\r\n  methods: {\r\n    formatValue () {\r\n      console.info(this.cronValue)\r\n      if (!this.cronValue) return\r\n      const values = this.cronValue.split(' ').filter(item => !!item)\r\n      if (!values || values.length <= 0) return\r\n      let i = 0\r\n      if (!this.hideSecond) this.second = values[i++]\r\n      if (values.length > i) this.minute = values[i++]\r\n      if (values.length > i) this.hour = values[i++]\r\n      if (values.length > i) this.day = values[i++]\r\n      if (values.length > i) this.month = values[i++]\r\n      if (values.length > i) this.week = values[i++]\r\n      if (values.length > i) this.year = values[i]\r\n    },\r\n    calTriggerList: debounce(function () {\r\n      this.calTriggerListInner()\r\n    }, 500),\r\n    calTriggerListInner () {\r\n      // 设置了回调函数\r\n      if (this.remote) {\r\n        this.remote(this.cronValue_c2, +this.startTime, v => { this.preTimeList = v })\r\n        return\r\n      }\r\n      // 去掉年份参数\r\n      const e = this.cronValue_c2\r\n      // console.info('>>>>>>' + e)\r\n      const format = 'yyyy-MM-dd hh:mm:ss'\r\n      const options = {\r\n        currentDate: dateFormat(this.startTime, format)\r\n      }\r\n      // console.info(options)\r\n      const iter = CronParser.parseExpression(e, options)\r\n      const result = []\r\n      for (let i = 0; i < 5; i++) {\r\n        result.push(dateFormat(new Date(iter.next()), format))\r\n      }\r\n      this.preTimeList = result.length > 0 ? result.join('\\n') : '无执行时间'\r\n    },\r\n    calStartTime () {\r\n      if (!this.exeStartTime) {\r\n        this.startTime = new Date()\r\n        return\r\n      }\r\n      try {\r\n        this.startTime = new Date(this.exeStartTime)\r\n      } catch (e) {\r\n        this.startTime = new Date()\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    SecondUi,\r\n    MinuteUi,\r\n    HourUi,\r\n    DayUi,\r\n    WeekUi,\r\n    MonthUi,\r\n    YearUi\r\n  },\r\n  created () {\r\n    this.formatValue()\r\n    this.calStartTime()\r\n    this.$nextTick(() => {\r\n      this.calTriggerListInner()\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.easy-cron {\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n.content {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  position: relative;\r\n}\r\n.right_top{\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  color: white;\r\n}\r\n.right_top p{\r\n  text-align: center;\r\n}\r\n.right_top p{\r\n  color: aqua;\r\n}\r\n.left {\r\n  flex-basis: 60%;\r\n  width: 100%;\r\n  border: 1px solid transparent;\r\n}\r\n\r\n.right {\r\n  flex-basis: 40%;\r\n}\r\n\r\n.ivu-table-small td {\r\n  height: 30px !important;\r\n}\r\n\r\n.exe-pre {\r\n  margin-top: 5px;\r\n}\r\n\r\n.exe-pre > div {\r\n  margin-top: 5px;\r\n}\r\n\r\n.exe-pre-panel {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.exe-pre-panel .p-left {\r\n  flex-basis: 80px;\r\n  flex-grow: 0;\r\n}\r\n\r\n.exe-pre-panel .p-right {\r\n  flex-basis: 100px;\r\n  flex-grow: 1;\r\n}\r\n</style>\r\n"]}]}