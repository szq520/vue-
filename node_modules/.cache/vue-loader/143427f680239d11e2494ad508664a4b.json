{"remainingRequest":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js??vue-loader-options!E:\\vueDome\\vue_Component\\src\\components\\sqlEditor\\SqlEditor.vue?vue&type=style&index=0&id=32712327&scoped=true&lang=css&","dependencies":[{"path":"E:\\vueDome\\vue_Component\\src\\components\\sqlEditor\\SqlEditor.vue","mtime":1576917690217},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_css-loader@1.0.1@css-loader\\index.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_postcss-loader@3.0.0@postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.txt {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n",{"version":3,"sources":["SqlEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgMA;AACA;AACA;AACA","file":"SqlEditor.vue","sourceRoot":"src/components/sqlEditor","sourcesContent":["<template>\r\n\t<textarea ref=\"txt\" class=\"txt\" />\r\n\t</template>\r\n\r\n<script>\r\nimport CodeMirror from \"codemirror\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/neo.css\";\r\nimport \"codemirror/theme/panda-syntax.css\";\r\nimport \"codemirror/mode/sql/sql.js\";\r\n\r\nimport \"codemirror/addon/hint/show-hint.js\";\r\nimport \"codemirror/addon/hint/show-hint.css\";\r\nimport \"./sql-hint.css\";\r\n//import \"codemirror/addon/hint/sql-hint.js\";\r\n// import { post } from \"@/utils/request.js\";\r\nexport default {\r\n  name: \"SqlEditor\",\r\n  data() {\r\n    return {\r\n      editor: null,\r\n      SqlList:[],//数据库\r\n       dico: [//sql  pf库  table表  column字段\r\n        { className: \"sql\", text: \"SELECT\" },\r\n        { className: \"sql\", text: \"FROM\" },\r\n        { className: \"sql\", text: \"WHERE\" },\r\n        { className: \"sql\", text: \"INNER\" },\r\n        { className: \"sql\", text: \"JOIN\" },\r\n        { className: \"sql\", text: \"UNION\" },\r\n        { className: \"sql\", text: \"EXEC\" },\r\n        { className: \"sql\", text: \"INSERT\" },\r\n        { className: \"sql\", text: \"INTO\" },\r\n        { className: \"sql\", text: \"VALUES\" },\r\n        { className: \"sql\", text: \"UPDATE\" },\r\n        { className: \"sql\", text: \"DELETE\" },\r\n        { className: \"sql\", text: \"GROUP\" },\r\n        { className: \"sql\", text: \"BY\" },\r\n        { className: \"sql\", text: \"HAVING\" },\r\n        { className: \"sql\", text: \"IS\" },\r\n        { className: \"sql\", text: \"DISTINCT\" },\r\n        { className: \"sql\", text: \"OUTER\" },\r\n        { className: \"sql\", text: \"TOP\" },\r\n        { className: \"sql\", text: \"EXISTS\" },\r\n        { className: \"sql\", text: \"WHEN\" },\r\n        { className: \"sql\", text: \"CASE\" },\r\n        { className: \"sql\", text: \"CAST\" },\r\n        { className: \"sql\", text: \"IN\" },\r\n        { className: \"sql\", text: \"NULL\" },\r\n        { className: \"table\", text: \"te_cash_exch\" },\r\n        { className: \"column\", text: \"status_cash\" },\r\n        { className: \"pf\", text: \"AddParamAtos.\" },\r\n      ]\r\n    };\r\n  },\r\n  beforeDestroy() {\r\n    if (this.editor) this.editor = null;\r\n  },\r\n  methods: {\r\n    initInfo(e = \"\") {//设置值\r\n      this.editor.setValue(e);\r\n    },\r\n    returnInfo() {//return editor为页面操作\r\n      return this.editor;\r\n    },\r\n    /*\r\n    Return a list of suggestion base on the searchString (the current word that user is typing).\r\n    Each suggestion is an object {text, displayText, className}. See https://codemirror.net/doc/manual.html#addon_show-hint\r\n    - keywords start with the searchString appears first in the suggestion list\r\n    */\r\n    suggest(searchString) {\r\n      /*\r\n      we will score which suggesion should appears first, the higer the score, the higer is the appearance order\r\n      */\r\n      let token = searchString;\r\n      if (searchString.startsWith(\".\")) token = searchString.substring(1);\r\n      else token = searchString.toLowerCase();\r\n      let resu = [];\r\n      let N = this.dico.length;\r\n\r\n      //init scoring: only retains and score suggestions which contain the searchString\r\n      for (let i = 0; i < N; i++) {\r\n        let keyword = this.dico[i].text.toLowerCase();\r\n        let suggestion = null;\r\n        //the base score of all the suggestion is N-i (it means we respect the order in the dico)\r\n        if (keyword.startsWith(token)) {\r\n          //add N to the score of keywords which begin with the token to make them raise up in the suggestion list\r\n          suggestion = Object.assign({ score: N + (N - i) }, this.dico[i]);\r\n        } else if (keyword.includes(token)) {\r\n          suggestion = Object.assign({ score: N - i }, this.dico[i]);\r\n        }\r\n        if (suggestion) resu.push(suggestion);\r\n      }\r\n\r\n      //case suggestion for \".\"\r\n      if (searchString.startsWith(\".\")) {\r\n        //raise score of columns, decrease the score of sql keyword\r\n        resu.forEach(s => {\r\n          if (s.className == \"column\") s.score += N;\r\n          else if (s.className == \"sql\") s.score -= N;\r\n          return s;\r\n        });\r\n      }\r\n\r\n      //console.log(searchString);\r\n      return resu.sort((a, b) => b.score - a.score);\r\n    },\r\n    /*\r\n    [hint implementation for codemirror](https://codemirror.net/doc/manual.html#addon_show-hint):\r\n    take an editor instance and options object, and return a {list, from, to} object, where list is an array of strings or objects (the completions), and from and to give the start and end of the token that is being completed as {line, ch} objects. \r\n     */\r\n    hint(editor) {\r\n      let cur = editor.getCursor();\r\n      let token = editor.getTokenAt(cur);\r\n      let searchString = token.string;\r\n      return {\r\n        list: this.suggest(searchString),\r\n        from: CodeMirror.Pos(cur.line, token.start),\r\n        to: CodeMirror.Pos(cur.line, token.end)\r\n      };\r\n    },\r\n    //实时SQL数据库,表,字段\r\n     init(){\r\n        const _this = this\r\n        this.editor.on('cursorActivity', function(editor) {\r\n        const __Cursor = editor.getDoc().getCursor()\r\n        const __Token = editor.getTokenAt(__Cursor)\r\n        const { string } = __Token\r\n        if (string.charAt(string.length - 1) === '.') {\r\n          // 当输入点时\r\n          const curIndex = __Token.start\r\n          const curLine = _this.editor.getLine(__Cursor.line)\r\n          const key = curLine.slice(curLine.slice(0, curIndex).lastIndexOf(' ') + 1, curIndex) // 点前的关键字\r\n           // let index =_this.SqlList.findIndex(item => item.name == key);\r\n           // _this.SqlList.map(i=>{\r\n           //   i.type='0'\r\n           // })\r\n           _this.getSqltable(_this.SqlList[index])\r\n        }else{\r\n           // _this.SqlList.map(i=>{\r\n           //   i.type='1'\r\n           // })\r\n        }\r\n      })\r\n     },\r\n    //实时数据请求\r\n    async getSqltable(item) {\r\n\t\t//模拟数据table\r\n\t\t let sqlTableList=[{name:\"TEST\"},{name:\"TEST1\"},{name:\"TEST2\"}]\r\n         let arr=this.dico;\r\n         let newArr = arr.reduce((total, current) => {\r\n              current.className !== \"table\" && total.push(current);\r\n              return total;\r\n          }, []);\r\n         //暂时bug 判断加点\r\n         let type='1';//不加\r\n         this.SqlList.map(i=>{ type=i.type;});\r\n         sqlTableList.map(i=>{\r\n            newArr.unshift({className:'table',text: type=='0' ? '.'+i.name :i.name})\r\n          });\r\n          this.dico=newArr;\r\n          this.editor.showHint()\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.editor) this.editor = null;\r\n    this.editor = CodeMirror.fromTextArea(this.$refs.txt, {\r\n      tabSize: 4,\r\n      mode: \"text/x-mysql\",\r\n      theme: \"panda-syntax\",\r\n      lineNumbers: true,\r\n      line: true,\r\n      lineWrapping: true,\r\n      hintOptions: {\r\n        completeSingle: false,\r\n        hint: this.hint\r\n      },\r\n      extraKeys: {\r\n        \"Ctrl-Space\": editor => {\r\n          editor.showHint();\r\n        }\r\n      }\r\n    });\r\n    this.editor.on(\"keypress\", editor => {\r\n      editor.showHint();\r\n    });\r\n    this.init();\r\n    this.getSqlList();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.txt {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\n"]}]}