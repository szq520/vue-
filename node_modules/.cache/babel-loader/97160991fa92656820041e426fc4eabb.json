{"remainingRequest":"E:\\vueDome\\vue_Component\\node_modules\\_babel-loader@8.0.6@babel-loader\\lib\\index.js!E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js??vue-loader-options!E:\\vueDome\\vue_Component\\src\\components\\sqlEditor\\SqlEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueDome\\vue_Component\\src\\components\\sqlEditor\\SqlEditor.vue","mtime":1576917690217},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_babel-loader@8.0.6@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueDome\\vue_Component\\node_modules\\_vue-loader@15.8.3@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\vueDome\\\\vue_Component\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.last-index-of\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.string.starts-with\";\n//\n//\n//\n//\nimport CodeMirror from \"codemirror\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neo.css\";\nimport \"codemirror/theme/panda-syntax.css\";\nimport \"codemirror/mode/sql/sql.js\";\nimport \"codemirror/addon/hint/show-hint.js\";\nimport \"codemirror/addon/hint/show-hint.css\";\nimport \"./sql-hint.css\"; //import \"codemirror/addon/hint/sql-hint.js\";\n// import { post } from \"@/utils/request.js\";\n\nexport default {\n  name: \"SqlEditor\",\n  data: function data() {\n    return {\n      editor: null,\n      SqlList: [],\n      //数据库\n      dico: [//sql  pf库  table表  column字段\n      {\n        className: \"sql\",\n        text: \"SELECT\"\n      }, {\n        className: \"sql\",\n        text: \"FROM\"\n      }, {\n        className: \"sql\",\n        text: \"WHERE\"\n      }, {\n        className: \"sql\",\n        text: \"INNER\"\n      }, {\n        className: \"sql\",\n        text: \"JOIN\"\n      }, {\n        className: \"sql\",\n        text: \"UNION\"\n      }, {\n        className: \"sql\",\n        text: \"EXEC\"\n      }, {\n        className: \"sql\",\n        text: \"INSERT\"\n      }, {\n        className: \"sql\",\n        text: \"INTO\"\n      }, {\n        className: \"sql\",\n        text: \"VALUES\"\n      }, {\n        className: \"sql\",\n        text: \"UPDATE\"\n      }, {\n        className: \"sql\",\n        text: \"DELETE\"\n      }, {\n        className: \"sql\",\n        text: \"GROUP\"\n      }, {\n        className: \"sql\",\n        text: \"BY\"\n      }, {\n        className: \"sql\",\n        text: \"HAVING\"\n      }, {\n        className: \"sql\",\n        text: \"IS\"\n      }, {\n        className: \"sql\",\n        text: \"DISTINCT\"\n      }, {\n        className: \"sql\",\n        text: \"OUTER\"\n      }, {\n        className: \"sql\",\n        text: \"TOP\"\n      }, {\n        className: \"sql\",\n        text: \"EXISTS\"\n      }, {\n        className: \"sql\",\n        text: \"WHEN\"\n      }, {\n        className: \"sql\",\n        text: \"CASE\"\n      }, {\n        className: \"sql\",\n        text: \"CAST\"\n      }, {\n        className: \"sql\",\n        text: \"IN\"\n      }, {\n        className: \"sql\",\n        text: \"NULL\"\n      }, {\n        className: \"table\",\n        text: \"te_cash_exch\"\n      }, {\n        className: \"column\",\n        text: \"status_cash\"\n      }, {\n        className: \"pf\",\n        text: \"AddParamAtos.\"\n      }]\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.editor) this.editor = null;\n  },\n  methods: {\n    initInfo: function initInfo() {\n      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      //设置值\n      this.editor.setValue(e);\n    },\n    returnInfo: function returnInfo() {\n      //return editor为页面操作\n      return this.editor;\n    },\n\n    /*\r\n    Return a list of suggestion base on the searchString (the current word that user is typing).\r\n    Each suggestion is an object {text, displayText, className}. See https://codemirror.net/doc/manual.html#addon_show-hint\r\n    - keywords start with the searchString appears first in the suggestion list\r\n    */\n    suggest: function suggest(searchString) {\n      /*\r\n      we will score which suggesion should appears first, the higer the score, the higer is the appearance order\r\n      */\n      var token = searchString;\n      if (searchString.startsWith(\".\")) token = searchString.substring(1);else token = searchString.toLowerCase();\n      var resu = [];\n      var N = this.dico.length; //init scoring: only retains and score suggestions which contain the searchString\n\n      for (var i = 0; i < N; i++) {\n        var keyword = this.dico[i].text.toLowerCase();\n        var suggestion = null; //the base score of all the suggestion is N-i (it means we respect the order in the dico)\n\n        if (keyword.startsWith(token)) {\n          //add N to the score of keywords which begin with the token to make them raise up in the suggestion list\n          suggestion = Object.assign({\n            score: N + (N - i)\n          }, this.dico[i]);\n        } else if (keyword.includes(token)) {\n          suggestion = Object.assign({\n            score: N - i\n          }, this.dico[i]);\n        }\n\n        if (suggestion) resu.push(suggestion);\n      } //case suggestion for \".\"\n\n\n      if (searchString.startsWith(\".\")) {\n        //raise score of columns, decrease the score of sql keyword\n        resu.forEach(function (s) {\n          if (s.className == \"column\") s.score += N;else if (s.className == \"sql\") s.score -= N;\n          return s;\n        });\n      } //console.log(searchString);\n\n\n      return resu.sort(function (a, b) {\n        return b.score - a.score;\n      });\n    },\n\n    /*\r\n    [hint implementation for codemirror](https://codemirror.net/doc/manual.html#addon_show-hint):\r\n    take an editor instance and options object, and return a {list, from, to} object, where list is an array of strings or objects (the completions), and from and to give the start and end of the token that is being completed as {line, ch} objects. \r\n     */\n    hint: function hint(editor) {\n      var cur = editor.getCursor();\n      var token = editor.getTokenAt(cur);\n      var searchString = token.string;\n      return {\n        list: this.suggest(searchString),\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    //实时SQL数据库,表,字段\n    init: function init() {\n      var _this = this;\n\n      this.editor.on('cursorActivity', function (editor) {\n        var __Cursor = editor.getDoc().getCursor();\n\n        var __Token = editor.getTokenAt(__Cursor);\n\n        var string = __Token.string;\n\n        if (string.charAt(string.length - 1) === '.') {\n          // 当输入点时\n          var curIndex = __Token.start;\n\n          var curLine = _this.editor.getLine(__Cursor.line);\n\n          var key = curLine.slice(curLine.slice(0, curIndex).lastIndexOf(' ') + 1, curIndex); // 点前的关键字\n          // let index =_this.SqlList.findIndex(item => item.name == key);\n          // _this.SqlList.map(i=>{\n          //   i.type='0'\n          // })\n\n          _this.getSqltable(_this.SqlList[index]);\n        } else {// _this.SqlList.map(i=>{\n          //   i.type='1'\n          // })\n        }\n      });\n    },\n    //实时数据请求\n    getSqltable: function () {\n      var _getSqltable = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(item) {\n        var sqlTableList, arr, newArr, type;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //模拟数据table\n                sqlTableList = [{\n                  name: \"TEST\"\n                }, {\n                  name: \"TEST1\"\n                }, {\n                  name: \"TEST2\"\n                }];\n                arr = this.dico;\n                newArr = arr.reduce(function (total, current) {\n                  current.className !== \"table\" && total.push(current);\n                  return total;\n                }, []); //暂时bug 判断加点\n\n                type = '1'; //不加\n\n                this.SqlList.map(function (i) {\n                  type = i.type;\n                });\n                sqlTableList.map(function (i) {\n                  newArr.unshift({\n                    className: 'table',\n                    text: type == '0' ? '.' + i.name : i.name\n                  });\n                });\n                this.dico = newArr;\n                this.editor.showHint();\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getSqltable(_x) {\n        return _getSqltable.apply(this, arguments);\n      }\n\n      return getSqltable;\n    }()\n  },\n  mounted: function mounted() {\n    if (this.editor) this.editor = null;\n    this.editor = CodeMirror.fromTextArea(this.$refs.txt, {\n      tabSize: 4,\n      mode: \"text/x-mysql\",\n      theme: \"panda-syntax\",\n      lineNumbers: true,\n      line: true,\n      lineWrapping: true,\n      hintOptions: {\n        completeSingle: false,\n        hint: this.hint\n      },\n      extraKeys: {\n        \"Ctrl-Space\": function CtrlSpace(editor) {\n          editor.showHint();\n        }\n      }\n    });\n    this.editor.on(\"keypress\", function (editor) {\n      editor.showHint();\n    });\n    this.init();\n    this.getSqlList();\n  }\n};",{"version":3,"sources":["SqlEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<textarea ref=\"txt\" class=\"txt\" />\r\n\t</template>\r\n\r\n<script>\r\nimport CodeMirror from \"codemirror\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/neo.css\";\r\nimport \"codemirror/theme/panda-syntax.css\";\r\nimport \"codemirror/mode/sql/sql.js\";\r\n\r\nimport \"codemirror/addon/hint/show-hint.js\";\r\nimport \"codemirror/addon/hint/show-hint.css\";\r\nimport \"./sql-hint.css\";\r\n//import \"codemirror/addon/hint/sql-hint.js\";\r\n// import { post } from \"@/utils/request.js\";\r\nexport default {\r\n  name: \"SqlEditor\",\r\n  data() {\r\n    return {\r\n      editor: null,\r\n      SqlList:[],//数据库\r\n       dico: [//sql  pf库  table表  column字段\r\n        { className: \"sql\", text: \"SELECT\" },\r\n        { className: \"sql\", text: \"FROM\" },\r\n        { className: \"sql\", text: \"WHERE\" },\r\n        { className: \"sql\", text: \"INNER\" },\r\n        { className: \"sql\", text: \"JOIN\" },\r\n        { className: \"sql\", text: \"UNION\" },\r\n        { className: \"sql\", text: \"EXEC\" },\r\n        { className: \"sql\", text: \"INSERT\" },\r\n        { className: \"sql\", text: \"INTO\" },\r\n        { className: \"sql\", text: \"VALUES\" },\r\n        { className: \"sql\", text: \"UPDATE\" },\r\n        { className: \"sql\", text: \"DELETE\" },\r\n        { className: \"sql\", text: \"GROUP\" },\r\n        { className: \"sql\", text: \"BY\" },\r\n        { className: \"sql\", text: \"HAVING\" },\r\n        { className: \"sql\", text: \"IS\" },\r\n        { className: \"sql\", text: \"DISTINCT\" },\r\n        { className: \"sql\", text: \"OUTER\" },\r\n        { className: \"sql\", text: \"TOP\" },\r\n        { className: \"sql\", text: \"EXISTS\" },\r\n        { className: \"sql\", text: \"WHEN\" },\r\n        { className: \"sql\", text: \"CASE\" },\r\n        { className: \"sql\", text: \"CAST\" },\r\n        { className: \"sql\", text: \"IN\" },\r\n        { className: \"sql\", text: \"NULL\" },\r\n        { className: \"table\", text: \"te_cash_exch\" },\r\n        { className: \"column\", text: \"status_cash\" },\r\n        { className: \"pf\", text: \"AddParamAtos.\" },\r\n      ]\r\n    };\r\n  },\r\n  beforeDestroy() {\r\n    if (this.editor) this.editor = null;\r\n  },\r\n  methods: {\r\n    initInfo(e = \"\") {//设置值\r\n      this.editor.setValue(e);\r\n    },\r\n    returnInfo() {//return editor为页面操作\r\n      return this.editor;\r\n    },\r\n    /*\r\n    Return a list of suggestion base on the searchString (the current word that user is typing).\r\n    Each suggestion is an object {text, displayText, className}. See https://codemirror.net/doc/manual.html#addon_show-hint\r\n    - keywords start with the searchString appears first in the suggestion list\r\n    */\r\n    suggest(searchString) {\r\n      /*\r\n      we will score which suggesion should appears first, the higer the score, the higer is the appearance order\r\n      */\r\n      let token = searchString;\r\n      if (searchString.startsWith(\".\")) token = searchString.substring(1);\r\n      else token = searchString.toLowerCase();\r\n      let resu = [];\r\n      let N = this.dico.length;\r\n\r\n      //init scoring: only retains and score suggestions which contain the searchString\r\n      for (let i = 0; i < N; i++) {\r\n        let keyword = this.dico[i].text.toLowerCase();\r\n        let suggestion = null;\r\n        //the base score of all the suggestion is N-i (it means we respect the order in the dico)\r\n        if (keyword.startsWith(token)) {\r\n          //add N to the score of keywords which begin with the token to make them raise up in the suggestion list\r\n          suggestion = Object.assign({ score: N + (N - i) }, this.dico[i]);\r\n        } else if (keyword.includes(token)) {\r\n          suggestion = Object.assign({ score: N - i }, this.dico[i]);\r\n        }\r\n        if (suggestion) resu.push(suggestion);\r\n      }\r\n\r\n      //case suggestion for \".\"\r\n      if (searchString.startsWith(\".\")) {\r\n        //raise score of columns, decrease the score of sql keyword\r\n        resu.forEach(s => {\r\n          if (s.className == \"column\") s.score += N;\r\n          else if (s.className == \"sql\") s.score -= N;\r\n          return s;\r\n        });\r\n      }\r\n\r\n      //console.log(searchString);\r\n      return resu.sort((a, b) => b.score - a.score);\r\n    },\r\n    /*\r\n    [hint implementation for codemirror](https://codemirror.net/doc/manual.html#addon_show-hint):\r\n    take an editor instance and options object, and return a {list, from, to} object, where list is an array of strings or objects (the completions), and from and to give the start and end of the token that is being completed as {line, ch} objects. \r\n     */\r\n    hint(editor) {\r\n      let cur = editor.getCursor();\r\n      let token = editor.getTokenAt(cur);\r\n      let searchString = token.string;\r\n      return {\r\n        list: this.suggest(searchString),\r\n        from: CodeMirror.Pos(cur.line, token.start),\r\n        to: CodeMirror.Pos(cur.line, token.end)\r\n      };\r\n    },\r\n    //实时SQL数据库,表,字段\r\n     init(){\r\n        const _this = this\r\n        this.editor.on('cursorActivity', function(editor) {\r\n        const __Cursor = editor.getDoc().getCursor()\r\n        const __Token = editor.getTokenAt(__Cursor)\r\n        const { string } = __Token\r\n        if (string.charAt(string.length - 1) === '.') {\r\n          // 当输入点时\r\n          const curIndex = __Token.start\r\n          const curLine = _this.editor.getLine(__Cursor.line)\r\n          const key = curLine.slice(curLine.slice(0, curIndex).lastIndexOf(' ') + 1, curIndex) // 点前的关键字\r\n           // let index =_this.SqlList.findIndex(item => item.name == key);\r\n           // _this.SqlList.map(i=>{\r\n           //   i.type='0'\r\n           // })\r\n           _this.getSqltable(_this.SqlList[index])\r\n        }else{\r\n           // _this.SqlList.map(i=>{\r\n           //   i.type='1'\r\n           // })\r\n        }\r\n      })\r\n     },\r\n    //实时数据请求\r\n    async getSqltable(item) {\r\n\t\t//模拟数据table\r\n\t\t let sqlTableList=[{name:\"TEST\"},{name:\"TEST1\"},{name:\"TEST2\"}]\r\n         let arr=this.dico;\r\n         let newArr = arr.reduce((total, current) => {\r\n              current.className !== \"table\" && total.push(current);\r\n              return total;\r\n          }, []);\r\n         //暂时bug 判断加点\r\n         let type='1';//不加\r\n         this.SqlList.map(i=>{ type=i.type;});\r\n         sqlTableList.map(i=>{\r\n            newArr.unshift({className:'table',text: type=='0' ? '.'+i.name :i.name})\r\n          });\r\n          this.dico=newArr;\r\n          this.editor.showHint()\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.editor) this.editor = null;\r\n    this.editor = CodeMirror.fromTextArea(this.$refs.txt, {\r\n      tabSize: 4,\r\n      mode: \"text/x-mysql\",\r\n      theme: \"panda-syntax\",\r\n      lineNumbers: true,\r\n      line: true,\r\n      lineWrapping: true,\r\n      hintOptions: {\r\n        completeSingle: false,\r\n        hint: this.hint\r\n      },\r\n      extraKeys: {\r\n        \"Ctrl-Space\": editor => {\r\n          editor.showHint();\r\n        }\r\n      }\r\n    });\r\n    this.editor.on(\"keypress\", editor => {\r\n      editor.showHint();\r\n    });\r\n    this.init();\r\n    this.getSqlList();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.txt {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\n"],"sourceRoot":"src/components/sqlEditor"}]}